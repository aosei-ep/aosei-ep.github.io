<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构</title>
    <url>/2022/04/10/DataStructure/</url>
    <content><![CDATA[<p><em><u>计算机科班、考研的重要课程</u></em></p>
<p>数据结构讨论的是数据的<em><strong>逻辑结构</strong></em>、<em><strong>存储方式</strong></em>以及相关操作</p>
<span id="more"></span>

<p><br><br></p>
<h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><h2 id="数据结构的基本概念与术语"><a href="#数据结构的基本概念与术语" class="headerlink" title="数据结构的基本概念与术语"></a>数据结构的基本概念与术语</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>数据：</strong>数据是信息的<strong>载体</strong>，描述客观事物属性的<strong>数</strong>、<strong>字符</strong>及所有能输入到计算机中并被计算机程序识别和处理的<strong>符号的集合</strong>。数据是计算机程序加工的<strong>原料</strong>。</p>
<p><strong>数据元素：</strong>是数据的<strong>基本单位</strong>。一个数据元素可由若干个数据项组成。</p>
<p><strong>结构：</strong>各个元素之间的关系。</p>
<p><strong>数据结构：</strong>相互之间存在<strong>一种</strong>或<strong>多种</strong>特定关系的<strong>数据元素的集合</strong>。</p>
<p><strong>数据对象：</strong>具有<strong>相同性质</strong>的<strong>数据元素的集合</strong>。</p>
<p><strong>数据类型：</strong>一个值的集合和定义在集合上的一组操作的总称。</p>
<ol>
<li><strong>原子类型：</strong>值不可再分</li>
<li><strong>结构类型：</strong>值可以再分解为若干成分（分量）的数据类型</li>
<li><b>抽象数据类型(<code>ADT</code>)</b>：抽象数据组织及与之相关的操作。<code>ADT</code>用数学化的语言定义数据的逻辑结构、定义运算。与具体的实现即存储结构无关。定义一个<code>ADT</code>就是定义了数据的逻辑机构和运算，也就是定义了一个数据结构。</li>
</ol>
<h3 id="数据结构三要素"><a href="#数据结构三要素" class="headerlink" title="数据结构三要素"></a>数据结构三要素</h3><ol>
<li><p><strong>逻辑结构</strong></p>
<p>它与数据的存储无关，是独立于计算机的。</p>
<img src="/2022/04/10/DataStructure/ds_LogicalStructure.png" class="" title="数据的逻辑结构">

<ul>
<li>集合（非线性）</li>
<li>线性结构</li>
<li>树形结构（非线性）</li>
<li>网状结构或图状结构（非线性）</li>
</ul>
</li>
<li><p><strong>存储结构</strong></p>
<p>指的是数据在计算机中的存储方式。</p>
<p>数据的存储结构主要有：</p>
<ul>
<li>顺序存储</li>
<li>链式存储</li>
<li>索引存储</li>
<li>散列存储</li>
</ul>
</li>
<li><p><strong>运算集合</strong></p>
<p>对数据的处理必定涉及到相关的运算。</p>
</li>
</ol>
<br>

<p><u><strong>数据结构</strong></u>就是指按照一定的<em><strong>逻辑结构</strong></em>组成的一批数据，使用某种<em><strong>存储结构</strong></em>将这批数据存储于计算机中，并在这些数据上定义了一个<em><strong>运算集合</strong></em></p>
<br>

<h2 id="算法与算法分析"><a href="#算法与算法分析" class="headerlink" title="算法与算法分析"></a>算法与算法分析</h2><h3 id="基本概念和特征"><a href="#基本概念和特征" class="headerlink" title="基本概念和特征"></a>基本概念和特征</h3><p>算法(Algorithm)是对特定问题求解步骤的一种描述，它是指令的有限序列。</p>
<p>算法满足5个特征：</p>
<ol>
<li><strong>有穷性：</strong>个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成</li>
<li><strong>确定性：</strong>算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出</li>
<li><strong>输入：</strong>算法可以有0个或多个输入</li>
<li><strong>输出：</strong>算法一定有输出的结果</li>
<li><strong>可行性：</strong>算法中的运算都必须是可以实现的</li>
</ol>
<p>通常，好的算法应该考虑到：</p>
<ol>
<li><strong>正确性</strong></li>
<li><strong>可读性</strong></li>
<li><strong>健壮性：</strong>输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果</li>
<li><strong>高效率和低存储</strong></li>
</ol>
<br>

<p><strong>程序</strong> &#x3D; <strong>数据结构</strong> + <strong>算法</strong></p>
<ul>
<li><strong>数据结构：</strong>如何把现实世界的问题信息化，将信息存进计算机，同时还要实现对数据结构的基本操作</li>
<li><strong>算法：</strong>如何处理这些信息，以解决实际问题</li>
</ul>
<br>

<h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><p>一个算法的优劣主要从 <u><strong>时间复杂度</strong>（执行时间）</u>和所需要占用的 <u><strong>空间复杂度</strong>（存储空间）</u>两方面来衡量</p>
<blockquote>
<p>  算法估计：</p>
<p>  和机器性能有关，和编程语言有关，和编译程序产生的机器指令质量有关，有些算法不能事后统计。</p>
</blockquote>
<h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>一个语句的频度是该语句在算法中被重复执行的次数。</p>
<p>算法中所有语句的频度之和记为<b>T(n)</b>，他是该算法问题规模n的函数，时间复杂度主要是分析T(n)的数量级。</p>
<p>时间复杂度一般总是考虑在最坏情况下的时间复杂度，以保证算法的运行时间不会比它更长。</p>
<p>分析程序的时间复杂度时，有两条规则：</p>
<ol>
<li><p><strong>加法规则</strong></p>
<p>T(n) &#x3D; T<sub>1</sub>(n) + T<sub>2</sub>(n) &#x3D; O(f(n)) + O(g(n)) &#x3D; O(max(f(n), g(n)))</p>
</li>
<li><p><strong>乘法规则</strong></p>
<p>T(n) &#x3D; T<sub>1</sub>(n) × T<sub>2</sub>(n) &#x3D; O(f(n)) × O(g(n)) &#x3D; O(f(n) × g(n))</p>
</li>
</ol>
<br>

<p>常见的渐进时间复杂度</p>
<p>​    O(1) &lt; O(log<sub>2</sub>n) &lt; O(n) &lt; O(nlog<sub>2</sub>n) &lt; O(n<sup>2</sup>) &lt; O(n<sup>3</sup>) &lt; O(2<sup>n</sup>) &lt; O(n!) &lt; O(n<sup>n</sup>)</p>
<br>

<p><strong>【注】</strong></p>
<ol>
<li>忽略问题规模更低阶的部分，只保留最高阶。主要是分析T(n)的数量级。</li>
<li>常数项可以忽略。</li>
<li>只需要挑循环中的一个基本操作分析它的执行次数与n的关系</li>
<li>多层嵌套循环，只需要关注最深层循环循环了多少次</li>
<li>一般来说我们只会度量最坏时间复杂度和平均时间复杂度</li>
</ol>
<br>

<h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>空间复杂度<b>S(n)</b>定义为该算法所耗费的存储空间，它是问题规模n的函数。</p>
<p>计算方法：</p>
<ol>
<li>找到与问题规模相关的空间大小变量</li>
<li>分析所占空间x与问题规模n的关系</li>
<li>x的数量级O(n)就是算法空间复杂度</li>
</ol>
<br>

<br>

<h1 id="线性表及其顺序存储"><a href="#线性表及其顺序存储" class="headerlink" title="线性表及其顺序存储"></a>线性表及其顺序存储</h1><h2 id="顺序表及其应用"><a href="#顺序表及其应用" class="headerlink" title="顺序表及其应用"></a>顺序表及其应用</h2><p>采用<strong>顺序存储</strong>方式来存储的<strong>线性表</strong>称为<strong>顺序表</strong>。</p>
<p>顺序表是将表中的结点一次存放在计算机内存中一组地址连续的存储单元中。</p>
<img src="/2022/04/10/DataStructure/sequence_1.png" class="" title="sequence">

<p>顺序表的实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 顺序表结构体 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">&#125; sequence_list;</span><br></pre></td></tr></table></figure>



<h2 id="栈的概念及其应用"><a href="#栈的概念及其应用" class="headerlink" title="栈的概念及其应用"></a>栈的概念及其应用</h2><h2 id="队列的概念及其应用"><a href="#队列的概念及其应用" class="headerlink" title="队列的概念及其应用"></a>队列的概念及其应用</h2><br>

<br>

<h1 id="线性表及其链式存储"><a href="#线性表及其链式存储" class="headerlink" title="线性表及其链式存储"></a>线性表及其链式存储</h1><h2 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h2><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><h2 id="带头结点的单链表及其应用"><a href="#带头结点的单链表及其应用" class="headerlink" title="带头结点的单链表及其应用"></a>带头结点的单链表及其应用</h2><h2 id="循环单链表与双链表"><a href="#循环单链表与双链表" class="headerlink" title="循环单链表与双链表"></a>循环单链表与双链表</h2><h2 id="链式栈与链式队列"><a href="#链式栈与链式队列" class="headerlink" title="链式栈与链式队列"></a>链式栈与链式队列</h2><br>

<br>

<h1 id="字符串、数组与特殊矩阵"><a href="#字符串、数组与特殊矩阵" class="headerlink" title="字符串、数组与特殊矩阵"></a>字符串、数组与特殊矩阵</h1><h2 id="字符串与模式匹配"><a href="#字符串与模式匹配" class="headerlink" title="字符串与模式匹配"></a>字符串与模式匹配</h2><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h2 id="特殊矩阵的压缩存储"><a href="#特殊矩阵的压缩存储" class="headerlink" title="特殊矩阵的压缩存储"></a>特殊矩阵的压缩存储</h2><h2 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h2><br>

<br>

<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="递归的基本概念与递归程序设计"><a href="#递归的基本概念与递归程序设计" class="headerlink" title="递归的基本概念与递归程序设计"></a>递归的基本概念与递归程序设计</h2><h2 id="递归程序设计执行过程的分析"><a href="#递归程序设计执行过程的分析" class="headerlink" title="递归程序设计执行过程的分析"></a>递归程序设计执行过程的分析</h2><h2 id="递归程序设计执行过程的分析-1"><a href="#递归程序设计执行过程的分析-1" class="headerlink" title="递归程序设计执行过程的分析"></a>递归程序设计执行过程的分析</h2><h2 id="递归程序到非递归程序的转换"><a href="#递归程序到非递归程序的转换" class="headerlink" title="递归程序到非递归程序的转换"></a>递归程序到非递归程序的转换</h2><br>

<br>

<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><br>

<br>

<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><h2 id="存储结构-1"><a href="#存储结构-1" class="headerlink" title="存储结构"></a>存储结构</h2><h2 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h2><h2 id="穿插二叉树"><a href="#穿插二叉树" class="headerlink" title="穿插二叉树"></a>穿插二叉树</h2><h2 id="树、森林和二叉树的转换"><a href="#树、森林和二叉树的转换" class="headerlink" title="树、森林和二叉树的转换"></a>树、森林和二叉树的转换</h2><br>

<br>

<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h2><h2 id="存储结构-2"><a href="#存储结构-2" class="headerlink" title="存储结构"></a>存储结构</h2><h2 id="遍历-2"><a href="#遍历-2" class="headerlink" title="遍历"></a>遍历</h2><h2 id="生成树与最小生成树"><a href="#生成树与最小生成树" class="headerlink" title="生成树与最小生成树"></a>生成树与最小生成树</h2><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h2 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h2><br>

<br>

<h1 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h1><h2 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h2><h2 id="线性表的检索"><a href="#线性表的检索" class="headerlink" title="线性表的检索"></a>线性表的检索</h2><h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><h2 id="平衡二叉排序树"><a href="#平衡二叉排序树" class="headerlink" title="平衡二叉排序树"></a>平衡二叉排序树</h2><h2 id="Huffman树"><a href="#Huffman树" class="headerlink" title="Huffman树"></a>Huffman树</h2><h2 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h2><h2 id="散列表的检索"><a href="#散列表的检索" class="headerlink" title="散列表的检索"></a>散列表的检索</h2><h2 id="查找算法的分析及应用"><a href="#查找算法的分析及应用" class="headerlink" title="查找算法的分析及应用"></a>查找算法的分析及应用</h2><br>

<br>

<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h2><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><h2 id="二路归并排序-merge-sort"><a href="#二路归并排序-merge-sort" class="headerlink" title="二路归并排序(merge sort)"></a>二路归并排序(merge sort)</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h2 id="排序算法的比较"><a href="#排序算法的比较" class="headerlink" title="排序算法的比较"></a>排序算法的比较</h2><h2 id="内部排序算法的应用"><a href="#内部排序算法的应用" class="headerlink" title="内部排序算法的应用"></a>内部排序算法的应用</h2><br>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>C语言 - 顺序表 - 链表 - 栈 - 队列 - 递归 - 数组 - 字符串 - 树 - 二叉树 - 图 - 检索 - 排序</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2022/03/31/first-blog/</url>
    <content><![CDATA[<p>欢迎来到这！这是测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<span id="more"></span>

<img src="/2022/03/31/first-blog/logo.png" class="" title="alt">



<img src="/2022/03/31/first-blog/4.jpg" class="">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2022/04/04/DynamicProgramming/</url>
    <content><![CDATA[<h4 id="什么是动态规划"><a href="#什么是动态规划" class="headerlink" title="什么是动态规划"></a><em><a href="https://www.zhihu.com/question/23995189">什么是动态规划</a></em></h4><p>动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。</p>
<p>其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</p>
<span id="more"></span>



<h4 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746. 使用最小花费爬楼梯"></a><a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs/">746. 使用最小花费爬楼梯</a></h4><p>假设数组<code>cost</code>的长度为 <strong>n</strong> ，则 <strong>n</strong> 个阶梯分别对应下标 <code>0</code> 到 <code>n-1</code>，楼层顶部对应下标 <strong>n</strong>，问题等价于计算达到下标 <strong>n</strong> 的最小花费</p>
<p>由于可以选择下标 <strong>0</strong> 或 <strong>1</strong> 作为初始阶梯，因此有 <code>dp[0]</code> <strong>&#x3D;</strong> <code>dp[1]</code> <strong>&#x3D;</strong> <code>0</code></p>
<p>当<code>2 ≤ i ≤ n</code> 时，可以从下标为 <code>i - 1</code> 或者 <code>i - 2</code> 获取花费的金额，选取两者中最小的那个加上当前已花费的金额</p>
<p><strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostClimbingStairs</span><span class="params">(<span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="number">0</span>, curr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= cost.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> Math.min(curr + cost[i - <span class="number">1</span>], prev + cost[i - <span class="number">2</span>]);</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Python</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minCostClimbingStairs</span>(<span class="params">self, cost: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        prev = <span class="number">0</span></span><br><span class="line">        curr = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(cost) + <span class="number">1</span>):</span><br><span class="line">            minTag = <span class="built_in">min</span>(curr + cost[i - <span class="number">1</span>], prev + cost[i - <span class="number">2</span>])</span><br><span class="line">            prev = curr</span><br><span class="line">            curr = minTag</span><br><span class="line">        <span class="keyword">return</span> curr</span><br></pre></td></tr></table></figure>

<br>



<h4 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213. 打家劫舍 II"></a><a href="https://leetcode-cn.com/problems/house-robber-ii/">213. 打家劫舍 II</a></h4><p>首先考虑最简单的情况。如果只有一间房屋，则偷窃该房屋，可以偷窃到最高总金额。如果只有两间房屋，则由于两间房屋相邻，不能同时偷窃，只能偷窃其中的一间房屋，因此选择其中金额较高的房屋进行偷窃，可以偷窃到最高总金额。</p>
<p>当房间数超过两间，这我们可以按照<strong>不偷第一间</strong>和<strong>不偷最后一间</strong>两种情况进行区分。</p>
<ul>
<li><strong>不偷第一间</strong>，则下标范围为 <code>(0, n - 2)</code></li>
<li><strong>不偷最后一间</strong>，则下标范围为<code>(1, n - 1)</code></li>
</ul>
<p>在范围内查找最大值即可</p>
<p><strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (length == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(robFlag(<span class="number">0</span>, length - <span class="number">2</span>, nums), robFlag(<span class="number">1</span>, length - <span class="number">1</span>, nums));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">robFlag</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curr</span> <span class="operator">=</span> nums[start], max = Math.max(nums[start], nums[start + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start + <span class="number">2</span>; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> max;</span><br><span class="line">            max = Math.max(curr + nums[i], max);</span><br><span class="line">            curr = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>



<h4 id="740-删除并获得点数"><a href="#740-删除并获得点数" class="headerlink" title="740. 删除并获得点数"></a><a href="https://leetcode-cn.com/problems/delete-and-earn/">740. 删除并获得点数</a></h4><p>每次操作中，选择任意一个 <code>nums[i]</code> ，删除它和所有等于 <code>nums[i] - 1</code> 和 <code>nums[i] + 1</code> 的元素，最后获得 <code>nums[i]</code> 的点数。</p>
<p>这道题将所有数字的点数相加后，会变成打家劫舍问题。因为<code>nums[i]</code>的范围为<code>1 ~ 10000</code>，则我们可以创建一个长度为<strong>10000</strong>的数组，然后因为相邻数字会被删除，可看做相邻数字不能被打劫</p>
<p><strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteAndEarn</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span>[] trans = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10001</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            trans[num] += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>, q = trans[<span class="number">1</span>], max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; trans.length; i++) &#123;</span><br><span class="line">            max = Math.max(q, p + trans[i]);</span><br><span class="line">            p = q;</span><br><span class="line">            q = max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>



<h4 id="918-环形子数组的最大和"><a href="#918-环形子数组的最大和" class="headerlink" title="918. 环形子数组的最大和"></a><a href="https://leetcode-cn.com/problems/maximum-sum-circular-subarray/">918. 环形子数组的最大和</a></h4><p><strong>Kadane 算法</strong></p>
<p>这题一共有两种情况（也就是相当于比53题多了一种最大子数组和是首尾连接的情况）</p>
<ul>
<li><strong>第一种情况：</strong>这个子数组不是环状的，就是说首尾不相连。</li>
<li><strong>第二种情况：</strong>这个子数组一部分在首部，一部分在尾部，我们可以将这第二种情况转换成第一种情况</li>
</ul>
<p>如下图：</p>
<img src="/2022/04/04/DynamicProgramming/918_1.png" class="">

<p>所以这最大的环形子数组和 &#x3D; <strong>max(最大子数组和，数组总和-最小子数组和)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubarraySumCircular</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>, maxSum = nums[<span class="number">0</span>], minSum = nums[<span class="number">0</span>], currMax = <span class="number">0</span>, currMin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            currMax = Math.max(currMax + num, num);</span><br><span class="line">            currMin = Math.min(currMin + num, num);</span><br><span class="line">            maxSum = Math.max(currMax, maxSum);</span><br><span class="line">            minSum = Math.min(currMin, minSum);</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum &gt; <span class="number">0</span> ? Math.max(maxSum, sum - minSum) : maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>



<h4 id="1014-最佳观光组合"><a href="#1014-最佳观光组合" class="headerlink" title="1014. 最佳观光组合"></a><a href="https://leetcode-cn.com/problems/best-sightseeing-pair/">1014. 最佳观光组合</a></h4><p>稍微给这个公式变形成 <code>A[i]+i+A[j]-j</code> ，这样就可以看成是左 <code>A[i]+i</code> 和右 <code>A[j]-j</code> 两部分和的最大值。</p>
<p>随着遍历数组，我们对两部分和取最大值，并且若当前的值减下标对之和比之前更大，我们就更新left部分的值即可</p>
<p><strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxScoreSightseeingPair</span><span class="params">(<span class="type">int</span>[] values)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> values[<span class="number">0</span>], ans = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            ans = Math.max(ans, tmp + values[i] - i);</span><br><span class="line">            tmp = Math.max(tmp, values[i] + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>



<h4 id="309-最佳买卖股票时机含冷冻期"><a href="#309-最佳买卖股票时机含冷冻期" class="headerlink" title="309. 最佳买卖股票时机含冷冻期"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">309. 最佳买卖股票时机含冷冻期</a></h4><p><code>dp[0][1]</code> 只影响 <code>dp[1][2]</code> ，而 <code>dp[1][2]</code> 又是由 <code>dp[0][1]</code> 和 <code>dp[0][2]</code> 共同决定的，而 <code>dp[0][2]</code> 如上文所说，肯定就是 <code>0</code> 。 因此 <code>dp[1][2] = Math.max(dp[0][1], dp[0][2]);</code> ，只要 <code>dp[0][1] ≤ 0</code> 都是不会造成影响的</p>
<p><strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp[i][0]: 持有股票</span></span><br><span class="line">        <span class="comment">// dp[i][1]: 不持有股票，本日卖出，下一天为冷冻期</span></span><br><span class="line">        <span class="comment">// dp[i][2]: 不持有股票，本日无卖出，下一天非冷冻期</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 持有股票: 1.昨天持有股票 2.本日买入（条件：昨天不持有）</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>] - prices[i]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 本日卖出: (条件:昨天持有)</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不持有，不卖出: 1.昨天卖出，不持有 2.昨天没卖出，但也不持有</span></span><br><span class="line">            dp[i][<span class="number">2</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后一天持有股票不会有收益</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(dp[len - <span class="number">1</span>][<span class="number">1</span>], dp[len - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>空间优化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp0: 持有股票</span></span><br><span class="line">        <span class="comment">// dp1: 不持有股票，本日卖出，下一天为冷冻期</span></span><br><span class="line">        <span class="comment">// dp2: 不持有股票，本日无卖出，下一天非冷冻期</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">dp0</span> <span class="operator">=</span> -prices[<span class="number">0</span>], dp1 = <span class="number">0</span>, dp2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 持有股票: 1.昨天持有股票 2.本日买入（条件：昨天不持有）</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">d0</span> <span class="operator">=</span> Math.max(dp0, dp2 - prices[i]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 本日卖出: (条件:昨天持有)</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">d1</span> <span class="operator">=</span> dp0 + prices[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不持有，不卖出: 1.昨天卖出，不持有 2.昨天没卖出，但也不持有</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">d2</span> <span class="operator">=</span> Math.max(dp1, dp2);</span><br><span class="line"></span><br><span class="line">            dp0 = d0;</span><br><span class="line">            dp1 = d1;</span><br><span class="line">            dp2 = d2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后一天持有股票不会有收益</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(dp1, dp2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>



<h4 id="714-买卖股票的最佳时机含手续费"><a href="#714-买卖股票的最佳时机含手续费" class="headerlink" title="714. 买卖股票的最佳时机含手续费"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">714. 买卖股票的最佳时机含手续费</a></h4><ul>
<li><b>sell: </b> 找到最佳卖出价格</li>
<li><b>buy: </b> 找到最佳买入价格</li>
</ul>
<p><strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices, <span class="type">int</span> fee)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">buy</span> <span class="operator">=</span> -prices[<span class="number">0</span>], sell = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            sell = Math.max(sell, buy + prices[i] - fee);</span><br><span class="line">            buy = Math.max(buy, sell - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sell;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>动态规划</tag>
        <tag>Java</tag>
        <tag>python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
</search>
